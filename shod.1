.TH SHOD 1
.SH NAME
.B shod, shodc
\- mouse-focused window manager
.SH SYNOPSIS
.B shod
.RB [ \-f
.IR buttons ]
.RB [ \-m
.IR modifier ]
.RB [ \-n
.IR notificationspec ]
.RB [ \-r
.IR buttons ]
.PP
.B shodc close
.RI [ win_id ]
.br
.B shodc desks
.br
.B shodc focus
.RB [ \-clrtbpnLRTBPN ]
.RI [ win_id ]
.br
.B shodc geom
.RB [ \-X|\-x
.IR N ]
.RB [ \-Y|\-y
.IR N ]
.RB [ \-W|\-w
.IR N ]
.RB [ \-H|\-h
.IR N ]
.RI [ win_id ]
.br
.B shodc goto
.RB [ \-m
.IR mon_id ]
.I desk_id
.br
.B shodc list
.RB [ \-ls ]
.RI [ win_id ]
.br
.B shodc sendto
.RB [ \-m
.IR mon_id ]
.I desk_id
.RI [ win_id ]
.br
.B shodc state
.RB [ \-ATR ]
.RB [ \-abfMms ]
.RI [ win_id ]
.SH DESCRIPTION
.B shod
is a multi\-monitor floating reparenting X11 window manager which supports tiled and tabbed containers.
.B shod
sets no keybindings, reads no configuration,
and works only via mouse with a given key modifier (Alt by default)
and by responding to client messages
(it is needed
a controller called
.IR shodc (1)
to control shod).
.PP
The options are as follows:
.TP
.BI \-f " buttons"
Which mouse buttons are used to focus a window when clicking on it.
The argument of this option is a string of numbers 1 to 5 (corresponding to mouse buttons 1 to 5).
For example, setting this resource to
.B 13
makes windows be focused when clicking on them with the mouse buttons 1 and 3
(the left and right mouse buttons, respectively).
If this is set to a blank string, no mouse button is used to focus windows,
and
.B shod
uses the focus\-follow\-cursor focusing style.
By default, focus follows mouse click on button 1.
.TP
.BI \-m " modifier"
Which modifier, from
.B Mod1
to
.B Mod5
is used to move and resize windows with the mouse pointer.
By default,
.B shod
uses Mod1 (Alt) as modifier.
.TP
.BI \-n " notificationspec"
This option is used to specify the placement of notification windows.
The argument of this option is a string of the form POS:GAP;
where POS is a cardinal position such as NW (northwest), SE (southeast) or C (center);
and GAP is a positive number.
For example, if this option is called with
.B NE:3
(the default value)
notifications are placed in the top right (northeast) corner of the screen,
and have a gap of 3 pixels between them.
.TP
.BI \-r " buttons"
Which mouse buttons are used to raise a window when clicking on it.
The argument of this option is a string of numbers 1 to 5 (corresponding to mouse buttons 1 to 5).
For example, setting this resource to
.B 13
makes windows be raised when clicking on them with the mouse buttons 1 and 3
(the left and right mouse buttons, respectively).
By default, raise occurs on mouse click on button 1.
.PP
.B shodc
is the remote controller for
.BR shod .
Its first argument must be an operation to be performed.
The following arguments are the options for the operation
(each operation accepts a different set of options).
The last arguments are the operation's arguments, such as a window ID or a desktop ID.
.PP
Known operations for
.B shodc
are listed below.
.SS Close Window
The
.B close
operation closes a window whose ID is provided as argument.
If no argument is provided, close the active window.
.SS List desktops
The
.B desks
operation lists the desktops, one per line.
.PP
If the line begins with an asterisk, the desktop is the focused one;
If the line begins with a hyphen, the desktop has an urgent window in it.
The number is the number of windows in the desktop.
.SS Focus Window
The
.B focus
operation focus a window whose ID is provided as argument.
If a option is provided, focus a window relative to the window provided as argument.
.PP
The options are as follows:
.TP
.B \-c
Cycle focus. This option only makes sense when using
.BR \-n ,
.BR \-p ,
.BR \-N ,
or
.BR \-P .
.TP
.B \-l
Focus window in the closest container to the left of the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-r
Focus window in the closest container to the right of the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-t
Focus window in the closest container on the top of the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-b
Focus window in the closest container on the bottom of the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-p
Focus window in the previous container in the focus list
in relation to the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-n
Focus window in the next container in the focus list
in relation to the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-L
Focus window in the column to the left of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-R
Focus window in the column to the right of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-T
Focus window in the row above (on the top of) the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-B
Focus window in the row below (on the bottom of) the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-P
Focus window in the tab previous to the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-N
Focus window in the tab next to the window provided as argument
(or the active window, if no argument is provided).
.SS Set Geometry
The
.B geom
operation sets the geometry (position and size) of the container of the window whose ID is provided as argument.
If no argument is provided, sets the geometry of the container of the active window.
If no position (set by the options
.B \-X
or
.B \-x
and
.B \-Y
or 
.BR \-y )
is provided, move window to position 0,0 (top left corner).
.PP
The options are as follows:
.TP
.B \-X \fIN\fP
Relative X position.
Set the position on the X axis to N plus the current X position of the container.
.TP
.B \-x \fIN\fP
Absolute X position.
Set the position on the X axis to N.
.TP
.B \-Y \fIN\fP
Relative Y position.
Set the position on the Y axis to N plus the current Y position of the container.
.TP
.B \-y \fIN\fP
Absolute Y position.
Set the position on the Y axis to N.
.TP
.B \-W \fIN\fP
Relative width.
Set the width of the contianer to N plus its current width.
.TP
.B \-w \fIN\fP
Absolute width.
Set the width of the contianer to N.
.TP
.B \-H \fIN\fP
Relative height.
Set the height of the contianer to N plus its current height.
.TP
.B \-h \fIN\fP
Absolute height.
Set the height of the contianer to N.
.SS Go To Desktop
The
.B goto
operation goes to the desktop ID provided as argument.
Different of other window managers, shod counts desktop from 1;
So the first desktop is the desktop 1, not the desktop 0.
.PP
The options are as follows:
.TP
.B \-M \fImonitor\fP
Goes to a desktop on the provided monitor rather than on the currently focused monitor.
Monitors are counted from 1, not from 0.
.SS List windows
The
.B list
operation
lists windows, one entry per line.
If a window ID is provided as argument, list only this window.
.PP
The option are as follows:
.TP
.B \-l
Long list format.
More information on this format below.
.TP
.B \-s
Sort by stacking order.
.PP
If the
.B \-l
option is given, the following information (delimited by tabs) is displayed for each window:
window state,
window desktop,
window geometry (size and position),
ID of the container window is on,
ID of the row window is on,
ID of the window,
name of the window.
.PP
The state consists of a sequence of eight characters,
each one meaning a state for the container.
If a character is \- the state is not set or does not apply to the window.
.IP \(bu 2
The first character is
.B d
to indicate that the window is a dialog.
.IP \(bu 2
The second character is
.B y
to indicate that the window's container is sticky.
.IP \(bu 2
The third character is
.B M
to indicate that the window's container is maximized.
.IP \(bu 2
The fourth character is
.B m
to indicate that the window's container is minimized.
.IP \(bu 2
The fifth character is
.B f
to indicate that the window's container is fullscreen.
.IP \(bu 2
The sixth character is
.B a
to indicate that the window's container is above others,
or
.B b
to indicate that the window's container is below others.
.IP \(bu 2
The seventh character is
.B u
to indicate that the window has the urgency hint set,
.B a
to indicate that the window demands attention,
or
.B U
to indicate that the window is both urgent and demands attention.
.IP \(bu 2
The eighth and last character is
.B a
to indicate that the window is active,
.B f
to indicate that the window is focused,
or
.B A
to indicate that the window is both active and focused.
.SS Send To Desktop
The
.B sendto
operation sends to the desktop ID provided as first argument
the container of the window whose ID provided as second argument.
If no window ID is provided, sends the container of the active window to that desktop.
Different of other window managers, shod counts desktop from 1;
So the first desktop is the desktop 1, not the desktop 0.
.PP
The options are as follows:
.TP
.B \-M \fImonitor\fP
Sends to a desktop on the provided monitor rather than on the currently focused monitor.
Monitors are counted from 1, not from 0.
.SS Set Container State
The
.B state
operation
sets the state of the container of the window whose ID is provided as argument.
If no argument is provided, sets the state of the container of the active window.
.PP
The options are as follows:
.TP
.B \-a
Set state above.
Raise container above others.
.TP
.B \-b
Set state below.
Lower container below others.
.TP
.B \-f
Set state fullscreen.
Make container fullscreen.
.TP
.B \-M
Set state maximized.
Maximize container
.TP
.B \-m
Set state minimized.
Minimize container.
.TP
.B \-s
Set state sticky.
Stick container to the monitor.
.TP
.B \-A
Add (set) state.
Force state to be set.
.TP
.B \-T
Toggle state.
Set state if it is unset, or unset it if it is set.
.TP
.B \-R
Remove (unset) state.
Force state to be unset.
.SH DESKTOP
.PP
.B shod
maintains one virtual monitor for each physical monitor found by
.IR Xinerama (1).
One of the monitors is the focused one, where new windows go to when they are created.
Each monitor contains a different set of virtual desktops (or "desktop", for short).
One of the desktops of a monitor is the focused desktop for that monitor.
.PP
Each monitor has an area called container area, within containers are spawned and can be maximized.
The size and position of a monitor's container area can be changed by dock windows.
.PP
Most client windows are displayed in containers;
but some windows are special and are displayed in different ways.
.SH CONTAINERS
Containers are floating windows where the windows of clients are mapped in.
A container contains client\-windows organized in columns, rows, and tabs;
each client\-window can also contain dialog windows associated with it.
A new client\-window is mapped inside a new container that floats in the focused desktop of the focused monitor.
This new container is placed in a empty area of the screen or in an area with few windows over it.
.SS Components of a container
.PP
The components of a container are listed below.
.TP
Border
Around each container lies its border, that is used to resize and move the container.
Borders are always visible, except when the container is fullscreen
(in which case the border is hidden until the container loses its fullscreen state).
A border is composed of eight handles: four edges and four corners.
The mouse cursor changes when hovering a handle; there is one cursor for each handle.
Dragging a handle with the mouse button 1 (the left mouse button) resizes the container to the direction of that handle.
Dragging a handle with the mouse button 3 (the right mouse button) moves the container.
.TP
Divisors
When a container has more than one column, a column divisor appears to separate those columns.
Dragging a column divisor with the mouse button 1 (the left mouse button)
resizes the columns it divides.
When a column has more than one row, a row divisor appears to separate those rows.
Dragging a row divisor with the mouse button 1 (the left mouse button)
resizes the rows it divides.
When a column has a maximized row, row divisors are hidden.
.TP
Columns
A container can have one or more columns.
Columns split a conteiner horizontally, and each container appears next to the other.
Columns are divided into rows.
A column can have either no maximized row, in which case all rows are visible;
or can have a single maximized row, in which case only that row is visible.
The process of maximizing a row or unmaximizing it is called restacking.
Restacking is controlled with the left title bar button.
.TP
Rows
A column can have one or more rows.
Rows split a column vertically, and each row appears on top of the other.
Rows are divided into tabs.
At the top of the row is the title bar.
The title bar lists the tabs of the row and contains two buttons:
the left button (used to restack the column of the row)
and the right button (used to close the active tab of the row).
The title bar is always visible, even when the content of the row is hidden by another
maximized row.
.TP
Title-bar
Title-bar is a region of the container where the tabs of the client\-windows are placed and
the left and right title-bar buttons appear.
There is one title bar for each row.
.TP
Left title-bar button
The left title-bar button is used to control its row and container.
Clicking on the left title-bar button with the mouse button 1 (the left mouse button)
restacks the column by maximizing its row (and minimizing the other rows in the same column)
or by returning the rows to their usual size.
Dragging the left title-bar button with the mouse button 3 (the right mouse button)
moves the row through the column or to other columns.
.TP
Tabs
A row can have one or more tabs.
Tabs split a column in the Z axis, and each tab appears above the other.
A tab contain a client\-window and all the dialogs associated to that client\-window.
A tab contains the current title of the client\-window and is placed on the title bar of a row.
Dragging a tab with the mouse button 1 (the left mouse button) moves the container.
Dragging a tab with the mouse button 3 (the right mouse button) dettach the tab from the container.
A dettached tab, while being dragged, can be reattached in other container (or the same container)
in the title bar of a row (and be part of that row), on a row divisor (and create a new row),
or on a column divisor (and create a new column).
.TP
Client\-window.
A client\-window is the actual window where the actual content of the client
(such as a terminal emulator) is drawn.
A client\-window can have one or more dialogs associated with it;
however only one dialog is visible per time.
.TP
Dialogs
A client\-window can have a dialog.
A dialog appears above the client window, and is centered on it.
.PP
The following illustration is an example of a container with several client\-windows in it.
This container contains two columns: one column in the left and another in the right.
The column in the left contain three rows, the top row is maximized and visible
(and has a dialog above it), while
the two rows on the bottom (one of them with two tabs) are hidden.
The column in the right contain two rows:
the top row with a single tab, and the bottom row with two tabs.
The border handles and divisors are represented by double line.
The title-bar buttons are represented by two squares around the title-bars.
.IP
.EX
╔═╤═════════════════════════╤═╦═╤═════════════════════════╤═╗
╟─┴─────────────────────────┴─╫─┴─────────────────────────┴─╢
║                             ║                             ║
║                             ║                             ║
║                             ║                             ║
║                             ║                             ║
║ ╔═════════════════════════╗ ║                             ║
║ ║                         ║ ║                             ║
║ ║                         ║ ║                             ║
║ ║                         ║ ║                             ║
║ ║                         ║ ╠═╤════════════╤════════════╤═╣
║ ║                         ║ ╟─┴────────────┴────────────┴─╢
║ ║                         ║ ║                             ║
║ ╚═════════════════════════╝ ║                             ║
║                             ║                             ║
║                             ║                             ║
║                             ║                             ║
║                             ║                             ║
╟─┬─────────────────────────┬─╢                             ║
╟─┼────────────┬────────────┼─╢                             ║
╚═╧════════════╧════════════╧═╩═════════════════════════════╝
.EE
.SS Focus history
.PP
When a client\-window is focused it gets keyboard input.
A focused client\-window continues to get keyboard input until it is closed,
its container is hidden, or another client\-window is explicitly selected to be focused.
Only one client\-window can be focused at a time.
Each container has a client\-window, called the selected client\-window
that is focused when the focus goes to that container.
.PP
The container of the focused client\-window is called the focused container
and is decorated with a visually distinct decoration (blue in the default theme);
while other containers have either the common decoration (gray in the default theme),
or have the urgent decoration (red in the default theme).
.PP
.B shod
maintains a list of focused containers called the focus history.  The
focused container is the first container in the focus history.  When a
client\-window gains focus, its container is moved to the beginning of
the focus history.  When a focused client\-window loses focus, the focus
goes to another client\-window in the same container, or (if there's no
other client\-window in that container) to the selected client\-window
of the next container in the focus history that is visible and in the
same desktop or monitor, or (if there's no other container to focus), no
window gets the focus.
.PP
A container can be focused with the mouse.
The mouse buttons set with the
.B \-f
command-line option are used to focus a container when clicking on it.
If no mouse button is specified, the focus follows the mouse pointer.
.SS Stacking order
Containers are stacked one above the other in the virtual Z axis.
The position of the container in this Z axis can be changed by a operation called raising.
.PP
The list of containers in this Z axis, from the one in the bottom to the topmost,
is called the stacking order.
The stacking order is organized in four layers.
When a container in is raised, it moves to the top of the other
containers in the same layer.
.TP
The bottom layer
At the bottom of the stacking order, lays the containers with the
bottom state set.  They appear below any other container.
.TP
The normal layer
Above the containers in the bottom layer, lays the containers that have
not set any of the states that change the stacking order (that is, the
below, above or fullscreen states).
.TP
The above layer
Above the containers in the normal layer, lays the container with the
above state set.
.TP
The fullscreen layer
Above the containers in the above layer, lays the container with the
fullscreen state set.  They appear above any other container.
.PP
A container can have either the above state or the below state set, but not both.
When a container has the fullscreen state set and either the above or the below state also set,
the fullscreen state has priority (so the container belongs to the fullscreen layer).
.PP
A container can be raised with the mouse.
The mouse buttons set with the
.B \-r
command-line option are used to raise a container to the top of its layer when clicking on it.
.SS Moving and Resizing
.PP
A container can be moved by various methods, which are listed below.
When a container is moved from one monitor to another, that
container moves from the desktop it is in to the focused desktop of the monitor it is moved to.
Container moving can only be performed if the container is not fullscreen
and not maximized.
.IP \(bu 2
By pressing the modifier key (set with the
.B \-m
command-line option) and dragging any part of a container with the mouse button 1
(the left mouse button).
.IP \(bu 2
By dragging the container border with the mouse button 3 (the right mouse button),
without pressing any modifier.
.IP \(bu 2
By dragging a tab with the mouse button 1 (the left mouse button),
without pressing any modifier.
.PP
A container can be resized by various methods, which are listed below.
Container resizing can only be performed if the container is not fullscreen
and not maximized.
.IP \(bu 2
By pressing the modifier key (set with the
.B \-m
command-line option) and dragging any part of a container with the mouse button 3
(the right mouse button).
.IP \(bu 2
By dragging the container border with the mouse button 1 (the left mouse button),
without pressing any modifier.
.SS Container states
.PP
Each container can or not have each one of the following states.
By default, a container has no state.
.TP
Maximized
Maximized containers occupies the entire space on the monitor available for windows
(a region called container area).
When a maximized container is unmaximized,
it restores its previous size and position.
.TP
Fullscreen
Fullscreen containers occupies the entire monitor space.
When a fullscreen container is made not full,
it restores its previous size and position.
.TP
Minimized
Minimized containers are not shown on the screen.
When a minimized container is unminimized,
it goes to the focused monitor.
.TP
Sticky
Sticky containers are \(lqsticked\(rq to the monitor,
and they appear on the screen no matter which desktop is focused on that monitor.
.TP
Above or below.
A container can be raised above or lowered below other containers.
.SH PROMPT
A window of type
.B _NET_WM_WINDOW_TYPE_PROMPT
(called prompt window)
is mapped on the top of the focused monitor.
This window will stay focused and mapped until be closed or a mouse
button is pressed outside that window.  This is an EWMH extension,
only used by
.IR xprompt (1).
.PP
.B shod
does not change the size of the prompt window.
However, shod changes its position.
.SH DESKTOP WINDOWS
Windows of type
.B _NET_WM_WINDOW_TYPE_DESKTOP
(called desktop windows)
are mapped bellow all other windows and are stacked on the order they are spawned.
Desktop windows cannot be manipulated.
Desktop windows have no decoration around them.
.PP
Desktop windows indicates a desktop feature.
That includes windows such as
.IR conky (1)
and windows that manage desktop icons.
.PP
.B shod
does not change the size nor the position of desktop windows.
.SH NOTIFICATIONS
Windows of type
.B _NET_WM_WINDOW_TYPE_NOTIFICATION
(called notifications)
are popped up on the top right corner, one above another.
Notification windows cannot be manipulated.
Notification windows have a decoration around them;
this decoration is the same as the borders of the active container
(or, for urgent notifications, the same as the borders of an urgent container).
.PP
An example of a notification window would be a bubble appearing with informative text such as
"Your laptop is running out of power" etc.
.PP
The screen corner where notification windows pop up can be changed with the
.B \-n
command-line option.
.PP
.B shod
can change the size and the position of notification windows.
.SH DOCKS
Windows of type
.B _NET_WM_WINDOW_TYPE_DOCK
(called docks, panels, or bars)
are mapped on a side of a monitor.
Dock windows cannot be manipulated, have no decoration and do not receive input focus.
.PP
A dock window can change the size of a region of the monitor called container area.
The container area is the region of the monitor that a maximized container occupies.
The container area is also the region of the monitor inside which containers are spawned.
.PP
Example of dock are a taskbar (that shows which programs are currently running),
and a statusbar (that shows information about the system, such as memory usage and system time).
.PP
.B shod
does not change the size nor the position of dock windows.
.SH DOCKAPPS
Windows that initiates in the WithdrawnState (called dockapps)
are ignored and mapped below all other windows.
.PP
Dockapps, or docked applications are windows which appear to reside
inside an icon or a dock rather than a container.
.PP
.B shod
will probably support dockapps in the future, but for now, they are simply ignored.
.SH ENVIRONMENT
The following environment variables affect the execution of
.B shod
.TP
.B DISPLAY
The display to start
.B shod
on.
.SH SEE ALSO
.IR X (1),
.IR xprompt (1),
.IR xnotify (1)
.SH BUGS
.PP
.IR XSizeHints (3)
are ignored.
Size hints make no sense in a tiled and tabbed window manager.
They only make sense when the size of a single container depends only on a single window,
and a single window dictates the size of a single container.
When the size of a container depends on the size of other windows (as in the tiled situation),
or when a set of windows must have the same size (as in a tabbed situation),
it makes no sense to constrain the size of a container based on the size hints of a single window,
because the relation from windows to containers is no more one-to-one.
.PP
Shaped client\-windows do not have shaped containers.
They are mapped inside a rectangular container.
.PP
Dockapps are ignored,
they may be supported in a future version of
.BR shod .
