.TH SHOD 1
.SH NAME
.B shod, shodc
\- mouse-focused window manager
.SH SYNOPSIS
.B shod
.RB [ \-cs ]
.RB [ \-m
.IR modifier ]
.PP
.B shodc close
.RI [ win_id ]
.br
.B shodc desks
.br
.B shodc focus
.RB [ \-clrtbpnLRTBPN ]
.RI [ win_id ]
.br
.B shodc geom
.RB [ \-r ]
.RB [ \-x
.IR N ]
.RB [ \-y
.IR N ]
.RB [ \-w
.IR N ]
.RB [ \-h
.IR N ]
.RI [ win_id ]
.br
.B shodc goto
.RB [ \-m
.IR mon_id ]
.I desk_id
.br
.B shodc list
.RB [ \-ls ]
.RI [ win_id ]
.br
.B shodc sendto
.RB [ \-m
.IR mon_id ]
.I desk_id
.RI [ win_id ]
.br
.B shodc state
.RB [ \-ATR ]
.RB [ \-abfMmsy ]
.RI [ win_id ]
.SH DESCRIPTION
.B shod
is a multi\-monitor floating reparenting X11 window manager which supports tiled and tabbed containers.
.B shod
sets no keybindings, reads no configuration,
and works only via mouse with a given key modifier (Alt by default)
and by responding to client messages
(it is needed
a controller called
.IR shodc (1)
to control shod).
.PP
The options are as follows:
.TP
.B \-c
Honor configure requests.
By default,
.B shod
ignore requests to configure a window size or position after the window is mapped.
A client may request the window manager to reconfigure (ie', resize or replace) its own window.
For example,
.IR xterm (1)
sends a configure request for the window manager to expand or shrink its window
when the user changes its font size.
Clients requesting to change its size may be annoying,
so configure requests are ignored by defaul;
but they can be honored by invoking
.B shod
with the
.B \-c
command-line option.
.TP
\fB\-m\fP \fImodifier\fP
Which modifier, from
.B Mod1
to
.B Mod5
is used to move and resize windows with the mouse pointer.
By default,
.B shod
uses
.B Mod1
(Alt) as modifier.
.TP
.B \-s
Use sloppy focus rather than click-to-focus.
.PP
.B shodc
is the remote controller for
.BR shod .
Its first argument must be an operation to be performed.
The following arguments are the options for the operation
(each operation accepts a different set of options).
The last arguments are the operation's arguments, such as a window ID or a desktop ID.
.PP
Known operations for
.B shodc
are listed below.
.SS Close Window
The
.B close
operation closes a window whose ID is provided as argument.
If no argument is provided, close the active window.
.SS List desktops
The
.B desks
operation lists the desktops, one per line.
.PP
If the line begins with an asterisk, the desktop is the focused one;
If the line begins with a hyphen, the desktop has an urgent window in it.
The number is the number of windows in the desktop.
.SS Focus Window
The
.B focus
operation focus a window whose ID is provided as argument.
If a option is provided, focus a window relative to the window provided as argument.
.PP
The options are as follows:
.TP
.B \-c
Cycle focus. This option only makes sense when using
.BR \-n ,
.BR \-p ,
.BR \-N ,
or
.BR \-P .
.TP
.B \-l
Focus window in the closest container to the left of the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-r
Focus window in the closest container to the right of the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-t
Focus window in the closest container on the top of the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-b
Focus window in the closest container on the bottom of the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-p
Focus window in the previous container in the focus list
in relation to the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-n
Focus window in the next container in the focus list
in relation to the container of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-L
Focus window in the column to the left of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-R
Focus window in the column to the right of the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-T
Focus window in the row above (on the top of) the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-B
Focus window in the row below (on the bottom of) the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-P
Focus window in the tab previous to the window provided as argument
(or the active window, if no argument is provided).
.TP
.B \-N
Focus window in the tab next to the window provided as argument
(or the active window, if no argument is provided).
.SS Set Geometry
The
.B geom
operation sets the geometry (position and size) of the container of the window whose ID is provided as argument.
If no argument is provided, sets the geometry of the container of the active window.
If no position (set by the options
.B \-x
and
.BR \-y )
is provided, move window to position 0,0 (top left corner).
.PP
The options are as follows:
.TP
.B \-r
Relative.
All position and size values are relative to the container's current position and size.
.TP
.B \-x \fIN\fP
Set the position on the X axis to N.
.TP
.B \-y \fIN\fP
Set the position on the Y axis to N.
.TP
.B \-w \fIN\fP
Set the width of the contianer to N.
.TP
.B \-h \fIN\fP
Set the height of the contianer to N.
.SS Go To Desktop
The
.B goto
operation goes to the desktop ID provided as argument.
Different of other window managers, shod counts desktop from 1;
So the first desktop is the desktop 1, not the desktop 0.
.PP
The options are as follows:
.TP
.B \-M \fImonitor\fP
Goes to a desktop on the provided monitor rather than on the currently focused monitor.
Monitors are counted from 1, not from 0.
.SS List windows
The
.B list
operation
lists windows, one entry per line.
If a window ID is provided as argument, list only this window.
.PP
The option are as follows:
.TP
.B \-l
Long list format.
More information on this format below.
.TP
.B \-s
Sort by stacking order.
.PP
If the
.B \-l
option is given, the following information (delimited by tabs) is displayed for each window:
window state,
window desktop,
window geometry (size and position),
ID of the container window is on,
ID of the row window is on,
ID of the window,
name of the window.
.PP
The state consists of a sequence of eight characters,
each one meaning a state for the container.
If a character is \- the state is not set or does not apply to the window.
.IP \(bu 2
The first character is
.B d
to indicate that the window is a dialog.
.IP \(bu 2
The second character is
.B y
to indicate that the window's container is sticky.
.IP \(bu 2
The third character is
.B M
to indicate that the window's container is maximized.
.IP \(bu 2
The fourth character is
.B m
to indicate that the window's container is minimized.
.IP \(bu 2
The fifth character is
.B f
to indicate that the window's container is fullscreen.
.IP \(bu 2
The sixth character is
.B s
to indicate that the window's container is shaded.
.IP \(bu 2
The seventh character is
.B a
to indicate that the window's container is above others,
or
.B b
to indicate that the window's container is below others.
.IP \(bu 2
The eighth character is
.B u
to indicate that the window has the urgency hint set,
.B a
to indicate that the window demands attention,
or
.B U
to indicate that the window is both urgent and demands attention.
.IP \(bu 2
The ninth and last character is
.B a
to indicate that the window is active,
.B f
to indicate that the window is focused,
or
.B A
to indicate that the window is both active and focused.
.SS Send To Desktop
The
.B sendto
operation sends to the desktop ID provided as first argument
the container of the window whose ID provided as second argument.
If no window ID is provided, sends the container of the active window to that desktop.
Different of other window managers, shod counts desktop from 1;
So the first desktop is the desktop 1, not the desktop 0.
.PP
The options are as follows:
.TP
.B \-M \fImonitor\fP
Sends to a desktop on the provided monitor rather than on the currently focused monitor.
Monitors are counted from 1, not from 0.
.SS Set Container State
The
.B state
operation
sets the state of the container of the window whose ID is provided as argument.
If no argument is provided, sets the state of the container of the active window.
.PP
The options are as follows:
.TP
.B \-a
Set state above.
Raise container above others.
.TP
.B \-b
Set state below.
Lower container below others.
.TP
.B \-f
Set state fullscreen.
Make container fullscreen.
.TP
.B \-M
Set state maximized.
Maximize container
.TP
.B \-m
Set state minimized.
Minimize container.
.TP
.B \-s
Set state shaded.
The container is resized to fit its titlebars.
.TP
.B \-y
Set state sticky.
Stick container to the monitor.
.TP
.B \-A
Add (set) state.
Force state to be set.
.TP
.B \-T
Toggle state.
Set state if it is unset, or unset it if it is set.
.TP
.B \-R
Remove (unset) state.
Force state to be unset.
.SH DESKTOP
.PP
.B shod
maintains one virtual monitor for each physical monitor found by
.IR Xinerama (1).
One of the monitors is the focused one, where new windows go to when they are created.
Each monitor contains a different set of virtual desktops (or "desktop", for short).
One of the desktops of a monitor is the focused desktop for that monitor.
.PP
Each monitor has an area called container area, within containers are spawned and can be maximized.
The size and position of a monitor's container area can be changed by bars and the dock.
.PP
Most client windows are displayed in containers;
but some windows are special and are displayed in different ways.
.SS Containers
Containers are floating windows.
A container contains sub\-windows (called tiles) organized in columns, rows, and tabs;
each tile represents a client and can have dialog windows associated with it.
A new container is created in the focused desktop of the focused monitor;
this new container is placed in a empty area of the screen.
.PP
.B Container Structure.
A container has borders (four edge handles and four corner handles) around it; borders are always visible, except when the container is fullscreen.
Borders are used to move and resize containers; more information on that below.
A container has divisors between its columns, and between the rows within each column.
Divisors are used to resize the tiles by dragging them with the first mouse button.
A container has title bars above each row; title bars contains tabs, the left (stack) button and the right (close) button.
More information on those below.
.PP
.B Focus.
Keyboard input goes to the focused client of the focused container.
A container can be focused by clicking on it with the 1st mouse button;
the click is passed to the application, which can process it in a particular way.
The focused container is decorated with a visually distinct decoration (blue in the default theme);
while other containers have either the common decoration (gray in the default theme),
or have the urgent decoration (red in the default theme).
.PP
.B Stacking Order.
Containers are stacked one above the other in the virtual Z axis.
The position of the container in this Z axis can be changed by a operation called raising.
A container can be raised by clicking on it with the 1st mouse button.
The list of containers in this Z axis, from the one in the bottom to the topmost,
is called the stacking order.
The stacking order is organized in four layers:
the bottom layer (for containers below others);
the middle layer (for normal containers);
the upper layer (for containers above others); and
the fullscreen layer (for fullscreen containers, independent of also being below or above others).
When a container in is raised, it moves to the top of its layer.
.PP
.B Container States.
Each container can have one or more of the following states:
maximized (the container occupies the entire container area);
fullscreen (the container occupies the entire monitor and its borders are hidden);
minimized (the container is not shown on the monitor);
shaded (the container is resized to show only the title bars, the clients are hidden);
sticky (the container is stickied to the monitor and appears on the screen no matter which desktop is selected); and
above/below (the container is raised above or lowered below other containers).
.PP
.B Container Movement.
A non-fullscreen, non-maximized container can be moved by the following methods:
by dragging the container border with the mouse button 3;
by dragging a title bar with the mouse button 1; or
by pressing the modifier key and dragging any part of the container with the mouse button 1.
.PP
.B Container Resizing.
A non-fullscreen, non-maximized container can be resized by the following methods:
by dragging the container border with the mouse button 1; or
by pressing the modifier key and dragging any part of the container with the mouse button 3.
.PP
.B The Title\-Bar.
Each title\-bar has tabs, which display the title of its client.
Dragging a tab with the mouse button 1 moves the entire container.
Dragging a tab with the mouse button 3 dettaches the tab from the container.
A detached tab, while being dragged,
can be reattached in other container (or the same container) by dropping it on the title bar or on a divisor,
or can be made into a new container by dropping it elsewhere.
.PP
.B The Left Title\-Bar Button.
Each title bar has a left button.
Clicking on the left title\-bar button with the first mouse button restacks the column
by maximizing its row (and minimizing the other rows in the same column) or undoes this state.
Dragging the left title\-bar button with the third mouse button moves the row through the columns.
.PP
.B The Right Title\-Bar Button.
Each title bar has a right button.
Clicking on the right title-bar button with the first mouse button closes the focused client or its top dialog.
.SS Dialogs
Windows that are transient for another managed windows (called its leader) are mapped in the center of the leader.
.PP
Dialogs are small windows that communicates informate to the user and can prompt for a response.
.PP
.B shod
only changes the position and size of a dialog window when the size of its leader changes.
.SS Splash Screens
Windows of type
.B _NET_WM_WINDOW_TYPE_SPLASH
(called splash screens)
are mapped above all other windows and are stacked on the order they are spawned.
Splash screens cannot be manipulated.
Splash screens have no decoration around them.
.PP
Splash screens are transient windows that appear temporarily while an application is loading.
.PP
.B shod
centers the splash screens on the monitor.
.SS Menus
Windows of type
.BR _NET_WM_WINDOW_TYPE_MENU ,
.BR _NET_WM_WINDOW_TYPE_UTILITY ,
.BR _NET_WM_WINDOW_TYPE_TOOLBAR ,
or
.B MWM_TEAROFF_WINDOW
(called menu windows)
are windows that cannot be tiled or tabbed into a container and are tied to a leader window.
They are floating windows that always appear on top of their leader and are not listed on the list of clients.
.PP
Menu windows, often called torn off windows, are pinnable menus, utility windows and toolbar windows,
ie' toolbars and menus "torn off" from the main application.
.PP
The user can change the position of a menu window in the same way of changing the position of a container.
.SS Prompt
A window of type
.B _NET_WM_WINDOW_TYPE_PROMPT
(called prompt window)
is mapped on the top of the focused monitor.
This window will stay focused and mapped until be closed or a mouse
button is pressed outside that window.  This is an EWMH extension,
only used by
.IR xprompt (1).
.PP
.B shod
does not change the size of the prompt window.
However, shod changes its position.
.SS Desktop windows
Windows of type
.B _NET_WM_WINDOW_TYPE_DESKTOP
(called desktop windows)
are mapped bellow all other windows and are stacked on the order they are spawned.
Desktop windows cannot be manipulated.
Desktop windows have no decoration around them.
.PP
Desktop windows indicates a desktop feature.
That includes windows such as
.IR conky (1)
and windows that manage desktop icons.
.PP
.B shod
does not change the size nor the position of desktop windows.
.SS Notifications
Windows of type
.B _NET_WM_WINDOW_TYPE_NOTIFICATION
(called notifications)
are popped up on the top right corner, one above another.
Notification windows cannot be manipulated.
Notification windows have a decoration around them;
this decoration is the same as the borders of the active container
(or, for urgent notifications, the same as the borders of an urgent container).
.PP
An example of a notification window would be a bubble appearing with informative text such as
"Your laptop is running out of power" etc.
.PP
The screen corner where notification windows pop up can be changed with the
.B \-N
command-line option.
.PP
.B shod
can change the size and the position of notification windows.
.SS Bars
Windows of type
.B _NET_WM_WINDOW_TYPE_DOCK
(called, panels, bars, or external docks (to distinguish them from shod's internal dock))
are mapped on a side of a monitor.
Dock windows cannot be manipulated, have no decoration and do not receive input focus.
.PP
A bar window can change the size of a region of the monitor called container area.
The container area is the region of the monitor that a maximized container occupies.
The container area is also the region of the monitor inside which containers are spawned.
.PP
Example of bar are a taskbar (that shows which programs are currently running),
and a statusbar (that shows information about the system, such as memory usage and system time).
.PP
.B shod
does not change the size nor the position of bar windows.
.SS Dockapps
Windows that initiates in the WithdrawnState (called dockapps) are mapped inside the dock.
The dock is a panel or bar that appears on the edge of the first monitor.
Inside the dock, dockapps are organized by order of map request.
.PP
Dockapps, or docked applications are windows which appear to reside
inside an icon or a dock rather than a container.
.PP
The placement of the dock can be changed with the
.B \-D command-line option.
.SH RESOURCES
.B shod
understands the following X resources.
Some of them (the resources that set colors) occur in triplets,
and all of them must be set for a consistent theme.
.TP
.B shod.borderWidth
The width of the borders and divisions.
.TP
.B shod.activeBackground, shod.activeTopShadowColor, shod.activeBottomShadowColor
The body color, light shadow color, and dark shadow color for the 3D
effect of the borders and title bars of active windows.
.TP
.B shod.dockBackground, shod.dockTopShadowColor, shod.dockBottomShadowColor
The body color, light shadow color, and dark shadow color for the 3D
effect of the dock.
.TP
.B shod.dockGravity
The placement of the dock described with up to two uppercase letters.
The first letter ("E", "N", "W" or "S") defines in which edge of the screen
(East, North, West or South) to allign the dock.
The optional second letter (also "E", "N", "W" or "S")
defines in which corner of that edge of the screen to allign the dock;
if no second letter is supplied, the dock is centered on that edge.
For example, for a value of "NE", a horizontal dock will be placed in the north edge of the screen,
alligned to the northeast corner.
For a value of "EN", a vertical dock will be placed in the east edge of the screen,
alligned to the northeast corner.
For a value of "E" (the default), a vertical dock wil be placed in the east edge of the screen,
alligned to its center.
.TP
.B shod.dockWidth
The width (for vertical docks) or height (for horizontal dock) of the dock in pixels.
Defaults to 64 (the size of most dockapps).
.TP
.B shod.inactiveBackground, shod.inactiveTopShadowColor, shod.inactiveBottomShadowColor
The body color, light shadow color, and dark shadow color for the 3D
effect of the borders and title bars of inactive windows.
.TP
.B shod.numOfDesktops
The number of desktops for each monitor.
The default is 10 desktops for each monitor.
.TP
.B shod.notifBackground, shod.notifTopShadowColor, shod.notifBottomShadowColor
The body color, light shadow color, and dark shadow color for the 3D
effect of the notification borders.
.TP
.B shod.notifGap
The gap in pixels between notifications.
.TP
.B shod.notifGravity
The placement of the dock in uppercase abbreviated points of the compass.
For example, a value of "N" will place notifications centered on the north edge of the screen.
A value of "E" will place notifications centered on the east edge of the screen.
A value of "NE" (the default) will place notifications on the northeast corner of the screen.
.TP
.B shod.promptBackground, shod.promptTopShadowColor, shod.promptBottomShadowColor
The body color, light shadow color, and dark shadow color for the 3D
effect of the prompt borders.
.TP
.B shod.shadowThickness
Thickness of the 3D shadow effect.
Must be less than the border width.
.TP
.B shod.snapProximity
The proximity of edges of a container in pixels for the snap attraction to occur when moving the container.
If set to zero, no snap attraction occurs.
The default is 8 pixels.
.TP
.B shod.font
The font of the text in the title bar.
.TP
.B shod.foreground
The color of the text in the title bar.
.TP
.B shod.titleWidth
The width of the title bar.
.TP
.B shod.urgentBackground, shod.urgentTopShadowColor, shod.urgentBottomShadowColor
The body color, light shadow color, and dark shadow color for the 3D
effect of the borders and title bars of urgent windows.
.SS Window-dependent resources
The resources below are named based on the class or the name of a window.
Therefore, those resources are client-specific.
Replace
.I CLASS
with the class of the window, and replace
.I NAME
with the name of the window.
.TP
\fBshod.class.\fICLASS\fB.type\fP
Define the type of a window whose class is equal to
.IR CLASS .
Possible types are
.B DESKTOP
(for desktop windows)
.B DOCKAPP
(for docked applications)
or
.B PROMPT
(for prompt windows).
.TP
\fBshod.class.\fICLASS\fB.dockpos\fP
Define the position in the dock of a docked application whose class is equal to
.IR CLASS .
Its value should be a number, starting from position 0.
.TP
\fBshod.name.\fICLASS\fB.type\fP
Define the type of a window whose name is equal to
.IR NAME .
Possible types are
.B DESKTOP
(for desktop windows)
.B DOCKAPP
(for docked applications)
or
.B PROMPT
(for prompt windows).
.TP
\fBshod.name.\fINAME\fB.dockpos\fP
Define the position in the dock of a docked application whose name is equal to
.IR NAME .
Its value should be a number, starting from position 0.
.SH ENVIRONMENT
The following environment variables affect the execution of
.B shod
.TP
.B DISPLAY
The display to start
.B shod
on.
.SH SEE ALSO
.IR X (1),
.IR xprompt (1),
.IR xnotify (1)
.SH BUGS
.IR XSizeHints (3)
are ignored.
Size hints make no sense in a tiled and tabbed window manager.
They only make sense when the size of a single container depends only on a single window,
and a single window dictates the size of a single container.
When the size of a container depends on the size of other windows (as in the tiled situation),
or when a set of windows must have the same size (as in a tabbed situation),
it makes no sense to constrain the size of a container based on the size hints of a single window,
because the relation from windows to containers is no more one-to-one.
.PP
Shaped client\-windows do not have shaped containers.
They are mapped inside a rectangular container.
.PP
The focus buttons and raise buttons settings, that were presented in earlier versions of shod, are removed in recent versions.
It is also not possible anymore to have a focus-follow-pointer focus behavior.
